package com.artik.saml.security;

import java.io.IOException;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;


@Configuration
@EnableWebSecurity
public class SecurityConfigurer extends WebSecurityConfigurerAdapter {
	
	private static final Logger logger = LoggerFactory.getLogger(SecurityConfigurer.class);

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http
		.authorizeRequests()
		.anyRequest()
		.authenticated()
		.and()
		.saml2Login();

	}

	@Bean
	public RelyingPartyRegistrationRepository relyingPartyRegistrationRepository() {
		// SAML configuration
		// Mapping this application to one or more Identity Providers
		return new InMemoryRelyingPartyRegistrationRepository(getSaml2RelyingPartyRegistration());
	}

	private RelyingPartyRegistration getSaml2RelyingPartyRegistration() {
		
		/*
		 * NameId : attribute qui specifie le username
		 * Subject/principal à identifier ?
		 */
		
		/*
		 * local entity ID - autogenerated based on URL
		 * = ID du SP
		 * 
		 *  SP receives SAML-assertions to URL {baseUrl}/login/saml2/sso/{registrationId}
		 *  as HTTP-POST or HTTP-Redirect
		 */
		String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
				
		// remote IDP entity ID
		String idpEntityId = "https://idp.ssocircle.com";
		
		// remote WebSSO Endpoint - Where to Send AuthNRequests to
		String webSsoEndpoint = "https://idp.ssocircle.com:443/sso/SSORedirect/metaAlias/publicidp";
		
		// local registration ID
		String registrationId = "artik-saml-service-provider-example";
		
		/* 
		 * local signing (and decryption key)
		 * Contient le certificat et la clé privée du SP
		 * PrivateKey/X509Certificate{SIGNING,DECRYPTION}
		 */
		Saml2X509Credential signingCredential = getSigningCredential();
		
		/*
		 *  IDP certificate for verification of incoming messages
		 *  Contient le certificat de l'IDP
		 *  X509Certificate{VERIFICATION,ENCRYPTION} 
		 */
		Saml2X509Credential idpVerificationCertificate = getIdpVerificationCertificate();
		
		String assertionConsumerServiceUrlTemplate = "{baseUrl}/login/saml2/sso/{registrationId}";

		return RelyingPartyRegistration
				.withRegistrationId(registrationId)
				.providerDetails(builder -> 
					builder
					.entityId(idpEntityId)
					.webSsoUrl(webSsoEndpoint)
					)
				.credentials(c -> 
					c.addAll(
							Arrays.asList(
									signingCredential,
									idpVerificationCertificate)
							))
				.localEntityIdTemplate(localEntityIdTemplate)
				.assertionConsumerServiceUrlTemplate(assertionConsumerServiceUrlTemplate)
				.build();

	}
	
	private Saml2X509Credential getSigningCredential() {

		ClassPathResource resource = new ClassPathResource("security/keystore.jks");
        KeyStore keyStore = null;
        try {
			keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
		} catch (KeyStoreException e) {
			logger.error("getSigningCredential: cannot get Keystore instance - " + e.getMessage());
			logger.error("",e);
			// throw new Exception("Keystore cannot get retrieved");
		}
		try {
			keyStore.load(resource.getInputStream(), "123456".toCharArray());
		} catch (NoSuchAlgorithmException | CertificateException | IOException e) {
			logger.error("getSigningCredential : cannot load Keystore - " + e.getMessage());
			logger.error("",e);
		}
		
		Key key = null;
		try {
			key = keyStore.getKey("testkey", "123456".toCharArray());
		} catch (UnrecoverableKeyException | KeyStoreException | NoSuchAlgorithmException e) {
			logger.error("getSigningCredential : cannot get private key from certificate testkey - " + e.getMessage());
			logger.error("",e);
		} 
		
		X509Certificate cert = null;
		try {
			cert = (X509Certificate) keyStore.getCertificate("testkey");
			Class c = cert.getClass();
			PublicKey p = cert.getPublicKey();
		} catch (KeyStoreException e) {
			logger.error("getSigningCredential : cannot get certificate testkey - " + e.getMessage());
			logger.error("",e);
		}
		
		Saml2X509Credential cred = new Saml2X509Credential((PrivateKey) key, cert, Saml2X509CredentialType.SIGNING, Saml2X509CredentialType.DECRYPTION);
		
		return cred;
	}
	
	private Saml2X509Credential getIdpVerificationCertificate() {
		ClassPathResource resource = new ClassPathResource("security/keystore.jks");
        KeyStore keyStore = null;
        try {
			keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
		} catch (KeyStoreException e) {
			logger.error("getIdpVerificationCertificate: cannot get Keystore instance - " + e.getMessage());
			logger.error("",e);
			// throw new Exception("Keystore cannot get retrieved");
		}
		try {
			keyStore.load(resource.getInputStream(), "123456".toCharArray());
		} catch (NoSuchAlgorithmException | CertificateException | IOException e) {
			logger.error("getIdpVerificationCertificate : cannot load Keystore - " + e.getMessage());
			logger.error("",e);
		}
		
		X509Certificate cert = null;
		try {
			cert = (X509Certificate) keyStore.getCertificate("sso-circle-cert");
			Class c = cert.getClass();
			PublicKey p = cert.getPublicKey();
		} catch (KeyStoreException e) {
			logger.error("getIdpVerificationCertificate : cannot get certificate sso-circle-cert - " + e.getMessage());
			logger.error("",e);
		}
		
		Saml2X509Credential cred = new Saml2X509Credential(cert, Saml2X509CredentialType.VERIFICATION, Saml2X509CredentialType.ENCRYPTION);
		
		return cred;
	}
	
	

}

/*
 * http .authorizeRequests() .antMatchers("/", "/home").permitAll()
 * .anyRequest().authenticated() .and() .formLogin() .loginPage("/login")
 * .permitAll() .and() .logout() .permitAll();
 * 
 * }
 */

/*
 * @Bean
 * 
 * @Override public UserDetailsService userDetailsService() { UserDetails user =
 * User.withDefaultPasswordEncoder() .username("user") .password("password")
 * .roles("USER") .build();
 * 
 * return new InMemoryUserDetailsManager(user); }
 */
